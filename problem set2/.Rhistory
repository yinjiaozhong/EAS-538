knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/EAS 538 Lab/problem set2")
# read data_q1
data1 <- read.csv("data_q1.csv")
head(data1, 3)
# get boxplot
boxplot(rate ~ when, data = data1, main = "Heart Rate Before and After EAS 538", xlab = "Time", ylab = "Heart Rate")
# get boxplot
boxplot(rate ~ when, data = data1, main = "Heart Rate Before and After EAS 538", xlab = "Time", ylab = "Heart Rate", col = c("red", "blue"))
# check if the data meets the assumptions
shapiro.test(data1rate[data1$when == "before"])
# check if the data meets the assumptions
shapiro.test(data1$rate[data1$when == "before"])
shapiro.test(data1$rate[data1$when == "after"])
# run paired sample t-test
t.test(rate ~ when, data = data1, paired = TRUE)
# run wilcoxon test
wilcox.test(data1$rate[data1$when == "before"], data1$rate[data1$when == "after"], paired = TRUE)
# run wilcoxon test
t.test(rate ~ when, data = data1, paired = TRUE)
# read data_q1
data1 = read.csv("data_q1.csv")
head(data1, 3)
# read data_q1
data1 <- read.csv("data_q1.csv")
head(data1, 3)
# read data
data2 = read.csv("data_q2.csv")
head(data2, 3)
shapiro.test(data2$share)
shapiro.test(data2$users)
shapiro.test(data2$comment)
shapiro.test(data2$like)
# check if the data meets the assumptions
shapiro.test(data2$share)
shapiro.test(data2$users)
shapiro.test(data2$comment)
shapiro.test(data2$like)
# run multiple linear regression model
model <- lm(share ~ type + paid + users + comment + like, data = data2)
summary(model)
# check if the data meets the assumptions
# check correlation
cor1 <- cor(data2[, c("share", "type", "paid", "users", "comment", "like")])
# check if the data meets the assumptions
# check correlation
cor1 <- cor(data2[, c("share","paid", "users", "comment", "like")])
print(cor1)
# read data
data2 = read.csv("data_q2.csv")
head(data2)
# check if the data meets the assumptions
# check correlation
cor1 <- cor(data2[, c("share", "users", "comment", "like")])
print(cor1)
shapiro.test(data2$share)
shapiro.test(data2$users)
shapiro.test(data2$comment)
shapiro.test(data2$like)
# check if the data meets the assumptions
# check correlation
cor1 <- cor(data2[, c("share", "users", "comment", "like")])
summary(cor1)
# check if the data meets the assumptions
# check correlation
cor1 <- cor(data2[, c("share", "users", "comment", "like")])
print(cor1)
pairs(~share + users + comment + like, data = data2)
# plot scatter plots
pairs(~share + type + users + comment + like, data = data2)
# plot scatter plots
pairs(~share + users + comment + like, data = data2)
# plot scatter plots
pairs(~share + paid + users + comment + like, data = data2)
# plot scatter plots
pairs(~share + users + comment + like, data = data2)
model <- lm(share ~ type + paid + users + comment + like, data = data2)
plot(model, which = 1)
plot(model, which = 2)
bptest(model)
# Residuals vs Fitted plot
model <- lm(share ~ type + paid + users + comment + like, data = data2)
plot(model, which = 1, main = "Residuals vs Fitted", xlab = "Fitted values", ylab = "Residuals")
# Residuals vs Fitted plot
model <- lm(share ~ type + paid + users + comment + like, data = data2)
plot(residuals ~ fitted(model),  main = "Residuals vs Fitted", xlab = "Fitted values", ylab = "Residuals")
# Residuals vs Fitted plot
model <- lm(share ~ type + paid + users + comment + like, data = data2)
residuals <- resid(model)
plot(residuals ~ fitted(model),  main = "Residuals vs Fitted", xlab = "Fitted values", ylab = "Residuals")
plot(model, which = 1)
# Residuals vs Fitted plot
model <- lm(share ~ type + paid + users + comment + like, data = data2)
plot(model, which = 1)
knitr::opts_chunk$set(echo = TRUE)
summary(lr)
data3 <- read.csv("data_q3.csv")
head(data3)
# Calculate correlation
cor(data3)
library(ggplot2)
# create a scatter plot
ggplot(data3, aes(x = Temperature, y = Chirps, col = "red")) + geom_point() + labs(title = "Temperature vs. Number of Cricket Chirps", x = "Temperature (Â°C)", y = "Number of Chirps per Hour")
# check homogeneity of variances
# Run linear regression model
lr <- lm(Chirps ~ Temperature, data = data3)
# get residual normality
shapiro.test(residuals(lr))
summary(lr)
# read in the data
data3 <- read.csv("data_q3.csv")
head(data3)
# get a visual plot
boxplot(Calories ~ Type, data = data3, main = "Calories in Different Types of Hot Dogs", xlab = "Hot Dog Type", ylab = "Calories")
# get a visual plot
boxplot(Calories ~ Type, data = data3, main = "Calories in Different Types of Hot Dogs", xlab = "Hot Dog Type", ylab = "Calories", col<-c"red","green","blue")
# get a visual plot
boxplot(Calories ~ Type, data = data3, main = "Calories in Different Types of Hot Dogs", xlab = "Hot Dog Type", ylab = "Calories", col = c"red","green","blue")
# get a visual plot
boxplot(Calories ~ Type, data = data3, main = "Calories in Different Types of Hot Dogs", xlab = "Hot Dog Type", ylab = "Calories", col = c("red","green","blue"))
# get a visual plot
boxplot(Calories ~ Type, data = data3, main = "Calories in Different Types of Hot Dogs", xlab = "Hot Dog Type", ylab = "Calories", col = c("red","green","blue"))
shapiro.test(data3$Calories[data3$Type == "beef"])
shapiro.test(data3$Calories[data3$Type == "beef"])
shapiro.test(data3$Calories[data3$Type == "deer"])
shapiro.test(data3$Calories[data3$Type == "poultry"])
anova_result <- aov(Calories ~ Type, data = data3)
summary(anova_result)
# check the homogeneity of variances
leveneTest(list(beef, deer, poultry))
library(car)
setwd("~/Desktop/EAS 538 Lab/problem set2")
# check the homogeneity of variances
leveneTest(list(beef, deer, poultry))
# check the homogeneity of variances
leveneTest(list("beef", "deer", "poultry"))
# check the homogeneity of variances
leveneTest(list(data3$Type))
# check the homogeneity of variances
leveneTest(list(data3$Calories))
# check the homogeneity of variances
leveneTest(list(data3$Calories[data3$Type == "beef"], data3$Calories[data3$Type == "deer"], data3$Calories[data3$Type == "poultry"]))
str(data3)
# check the homogeneity of variances
leveneTest(list(data3$Calories[data3$Type == "beef"], data3$Calories[data3$Type == "deer"], data3$Calories[data3$Type == "poultry"]))
str(data3)
sum(is.na(data3))
# check the homogeneity of variances
leveneTest(list(data3$Calories[data3$Type == "beef"], data3$Calories[data3$Type == "deer"], data3$Calories[data3$Type == "poultry"]))
str(data3)
sum(is.na(data3))
# check the homogeneity of variances
leveneTest(list(data3$Calories[data3$Type == "beef"], data3$Calories[data3$Type == "deer"], data3$Calories[data3$Type == "poultry"]))
str(data3)
sum(is.na(data3))
library(car)
# check the homogeneity of variances
leveneTest(list(data3$Calories[data3$Type == "beef"], data3$Calories[data3$Type == "deer"], data3$Calories[data3$Type == "poultry"]))
beef_calories <- data3$Calories[data3$Type == "beef"]
deer_calories <- data3$Calories[data3$Type == "deer"]
poultry_calories <- data3$Calories[data3$Type == "poultry"]
# check the homogeneity of variances
leveneTest(list(beef_calories, deer_calories, poultry_calories))
beef_calories <- as.numeric(data3$Calories[data3$Type == "beef"])
deer_calories <- as.numeric(data3$Calories[data3$Type == "deer"])
poultry_calories <- as.numeric(data3$Calories[data3$Type == "poultry"])
# check the homogeneity of variances
leveneTest(list(beef_calories, deer_calories, poultry_calories))
# Run the var.test function
var.test(beef_calories, deer_calories)
var.test(beef_calories, poultry_calories)
var.test(deer_calories, poultry_calories)
# Run the var.test function to check the homogeneity of variances
var.test(beef_calories, deer_calories)
var.test(beef_calories, poultry_calories)
var.test(deer_calories, poultry_calories)
beef_calories <- data3$Calories[data3$Type == "beef"]
deer_calories <- data3$Calories[data3$Type == "deer"]
poultry_calories <- data3$Calories[data3$Type == "poultry"]
# Run the var.test function to check the homogeneity of variances
var.test(beef_calories, deer_calories)
var.test(beef_calories, poultry_calories)
var.test(deer_calories, poultry_calories)
# run Tukey's HSD
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
plot(tukey_result)
# run Tukey's HSD
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
plot(tukey_result)
data4=read.csv("data_q4.csv")
head(data4)
model4 <- lm(sucrose ~ weight + days.old + cactus.type, data = data4)
# check normality of residuals
# check linearity
# check homoscedasticity
# check the variance inflation factors (VIF)
model4 <- lm(sucrose ~ weight + days.old + cactus.type, data = data4)
# check normality of residuals
residuals <- residuals(model4)
shapiro.test(residuals)  # Shapiro-Wilk test for normality
# check linearity
crPlots(model4)
# check homoscedasticity
plot(model, which = 3)
# check the variance inflation factors (VIF)
vif(model4)
# check linearity
plot(model4)
# check linearity
plot(data4$weight, data4$sucrose, main = "Scatter plot of sucrose vs. weight", xlab = "Weight (grams)", ylab = "Sucrose (%)")
plot(data4$days.old, data4$sucrose, main = "Scatter plot of sucrose vs. days.old", xlab = "Days old", ylab = "Sucrose (%)")
summary(model4)
interaction_model <- lm(sucrose ~ weight + days.old * cactus.type, data = data4)
summary(interaction_model)
library(ggplot2)
ggplot(data4, aes(x = days.old, y = sucrose, color = cactus.type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Days Old", y = "Sucrose Levels", title = "Relationship between Sucrose Levels and Days Old by Cactus Type")
library(ggplot2)
ggplot(data4, aes(x = days.old, y = sucrose, color = cactus.type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Days Old", y = "Sucrose Levels(%)", title = "Relationship between Sucrose Levels and Days Old by Cactus Type")
library(nlme)
library(nlme)
data(sleepstudy)
data(PlantGrowth)
data(Orthodont)
install.packages("lme4")
library(lme4)
data(sleepstudy)
library(nlme)
data(sleepstudy)
data(PlantGrowth)
data(Orthodont)
library(lme4)
data(sleepstudy)
library(nlme)
data(sleepstudy)
data(PlantGrowth)
data(Orthodont)
library(lme4)
data(sleepstudy)
data(PlantGrowth)
data(Orthodont)
summary(sleepstudy)
library(nlme)
library(lme4)
data(sleepstudy)
summary(sleepstudy)
library(lme4)
data(sleepstudy)
summary(sleepstudy)
mixed_model <- lmer(Reaction ~ Days + (1 | Subject), data = sleepstudy)
install.packages("Matrix")
library(Matrix)
install.packages("lme4")
library(lme4)
data(sleepstudy)
mixed_model <- lmer(Reaction ~ Days + (1 | Subject), data = sleepstudy)
install.packages("lme4")
knitr::opts_chunk$set(echo = TRUE)
mixed_model <- lmer(Reaction ~ Days + (1 | Subject), data = sleepstudy)
library(lme4)
mixed_model <- lmer(Reaction ~ Days + (1 | Subject), data = sleepstudy)
install.packages("Matrix")
library(Matrix)
library(lme4)
mixed_model <- lmer(Reaction ~ Days + (1 | Subject), data = sleepstudy)
install.packages("Matrix")
knitr::opts_chunk$set(echo = TRUE)
install.packages("Matrix")
library(Matrix)
library(lme4)
mixed_model <- lmer(Reaction ~ Days + (1 | Subject), data = sleepstudy)
library(Matrix)
library(lme4)
mixed_model <- lmer(Reaction ~ Days + (1 | Subject), data = sleepstudy)
library(Matrix)
library(lme4)
mixed_model <- lmer(Reaction ~ Days + (1 | Subject), data = sleepstudy)
summary(mixed_model)
